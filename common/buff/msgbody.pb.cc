// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msgbody.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msgbody.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace spplus {
namespace buff {

namespace {

const ::google::protobuf::Descriptor* AttendBean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttendBean_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserBean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserBean_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogDataBean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogDataBean_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutEnrollDataMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutEnrollDataMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutEnrollDataMsg_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutEnrollDataMsg_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutEnrollDataMsg_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutEnrollDataMsg_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetEnrollDataMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetEnrollDataMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetEnrollDataMsg_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetEnrollDataMsg_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetEnrollDataMsg_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetEnrollDataMsg_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGeneralLogDataMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGeneralLogDataMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGeneralLogDataMsg_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGeneralLogDataMsg_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGeneralLogDataMsg_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGeneralLogDataMsg_Response_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_msgbody_2eproto() {
  protobuf_AddDesc_msgbody_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msgbody.proto");
  GOOGLE_CHECK(file != NULL);
  AttendBean_descriptor_ = file->message_type(0);
  static const int AttendBean_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttendBean, nmachinenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttendBean, ipaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttendBean, nport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttendBean, nnetpassword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttendBean, nlicense_),
  };
  AttendBean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AttendBean_descriptor_,
      AttendBean::default_instance_,
      AttendBean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttendBean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttendBean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AttendBean));
  UserBean_descriptor_ = file->message_type(1);
  static const int UserBean_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBean, apnenrollnumer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBean, apnbackupnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBean, apnmechineprivilege_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBean, apnenableflage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBean, apnenrolldata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBean, apnpassword_),
  };
  UserBean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserBean_descriptor_,
      UserBean::default_instance_,
      UserBean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserBean));
  LogDataBean_descriptor_ = file->message_type(2);
  static const int LogDataBean_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogDataBean, apnenrollnumer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogDataBean, apnverifymode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogDataBean, apninoutmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogDataBean, apndatetime_),
  };
  LogDataBean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogDataBean_descriptor_,
      LogDataBean::default_instance_,
      LogDataBean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogDataBean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogDataBean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogDataBean));
  PutEnrollDataMsg_descriptor_ = file->message_type(3);
  static const int PutEnrollDataMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutEnrollDataMsg, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutEnrollDataMsg, response_),
  };
  PutEnrollDataMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PutEnrollDataMsg_descriptor_,
      PutEnrollDataMsg::default_instance_,
      PutEnrollDataMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutEnrollDataMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutEnrollDataMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PutEnrollDataMsg));
  PutEnrollDataMsg_Request_descriptor_ = PutEnrollDataMsg_descriptor_->nested_type(0);
  static const int PutEnrollDataMsg_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutEnrollDataMsg_Request, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutEnrollDataMsg_Request, attend_),
  };
  PutEnrollDataMsg_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PutEnrollDataMsg_Request_descriptor_,
      PutEnrollDataMsg_Request::default_instance_,
      PutEnrollDataMsg_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutEnrollDataMsg_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutEnrollDataMsg_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PutEnrollDataMsg_Request));
  PutEnrollDataMsg_Response_descriptor_ = PutEnrollDataMsg_descriptor_->nested_type(1);
  static const int PutEnrollDataMsg_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutEnrollDataMsg_Response, rescode_),
  };
  PutEnrollDataMsg_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PutEnrollDataMsg_Response_descriptor_,
      PutEnrollDataMsg_Response::default_instance_,
      PutEnrollDataMsg_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutEnrollDataMsg_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutEnrollDataMsg_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PutEnrollDataMsg_Response));
  GetEnrollDataMsg_descriptor_ = file->message_type(4);
  static const int GetEnrollDataMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEnrollDataMsg, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEnrollDataMsg, response_),
  };
  GetEnrollDataMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetEnrollDataMsg_descriptor_,
      GetEnrollDataMsg::default_instance_,
      GetEnrollDataMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEnrollDataMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEnrollDataMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetEnrollDataMsg));
  GetEnrollDataMsg_Request_descriptor_ = GetEnrollDataMsg_descriptor_->nested_type(0);
  static const int GetEnrollDataMsg_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEnrollDataMsg_Request, apnenrollnumer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEnrollDataMsg_Request, attend_),
  };
  GetEnrollDataMsg_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetEnrollDataMsg_Request_descriptor_,
      GetEnrollDataMsg_Request::default_instance_,
      GetEnrollDataMsg_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEnrollDataMsg_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEnrollDataMsg_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetEnrollDataMsg_Request));
  GetEnrollDataMsg_Response_descriptor_ = GetEnrollDataMsg_descriptor_->nested_type(1);
  static const int GetEnrollDataMsg_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEnrollDataMsg_Response, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEnrollDataMsg_Response, rescode_),
  };
  GetEnrollDataMsg_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetEnrollDataMsg_Response_descriptor_,
      GetEnrollDataMsg_Response::default_instance_,
      GetEnrollDataMsg_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEnrollDataMsg_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEnrollDataMsg_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetEnrollDataMsg_Response));
  GetGeneralLogDataMsg_descriptor_ = file->message_type(5);
  static const int GetGeneralLogDataMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGeneralLogDataMsg, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGeneralLogDataMsg, response_),
  };
  GetGeneralLogDataMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGeneralLogDataMsg_descriptor_,
      GetGeneralLogDataMsg::default_instance_,
      GetGeneralLogDataMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGeneralLogDataMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGeneralLogDataMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGeneralLogDataMsg));
  GetGeneralLogDataMsg_Request_descriptor_ = GetGeneralLogDataMsg_descriptor_->nested_type(0);
  static const int GetGeneralLogDataMsg_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGeneralLogDataMsg_Request, attend_),
  };
  GetGeneralLogDataMsg_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGeneralLogDataMsg_Request_descriptor_,
      GetGeneralLogDataMsg_Request::default_instance_,
      GetGeneralLogDataMsg_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGeneralLogDataMsg_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGeneralLogDataMsg_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGeneralLogDataMsg_Request));
  GetGeneralLogDataMsg_Response_descriptor_ = GetGeneralLogDataMsg_descriptor_->nested_type(1);
  static const int GetGeneralLogDataMsg_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGeneralLogDataMsg_Response, logrec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGeneralLogDataMsg_Response, rescode_),
  };
  GetGeneralLogDataMsg_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGeneralLogDataMsg_Response_descriptor_,
      GetGeneralLogDataMsg_Response::default_instance_,
      GetGeneralLogDataMsg_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGeneralLogDataMsg_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGeneralLogDataMsg_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGeneralLogDataMsg_Response));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msgbody_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AttendBean_descriptor_, &AttendBean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserBean_descriptor_, &UserBean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogDataBean_descriptor_, &LogDataBean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PutEnrollDataMsg_descriptor_, &PutEnrollDataMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PutEnrollDataMsg_Request_descriptor_, &PutEnrollDataMsg_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PutEnrollDataMsg_Response_descriptor_, &PutEnrollDataMsg_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetEnrollDataMsg_descriptor_, &GetEnrollDataMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetEnrollDataMsg_Request_descriptor_, &GetEnrollDataMsg_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetEnrollDataMsg_Response_descriptor_, &GetEnrollDataMsg_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGeneralLogDataMsg_descriptor_, &GetGeneralLogDataMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGeneralLogDataMsg_Request_descriptor_, &GetGeneralLogDataMsg_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGeneralLogDataMsg_Response_descriptor_, &GetGeneralLogDataMsg_Response::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msgbody_2eproto() {
  delete AttendBean::default_instance_;
  delete AttendBean_reflection_;
  delete UserBean::default_instance_;
  delete UserBean_reflection_;
  delete LogDataBean::default_instance_;
  delete LogDataBean_reflection_;
  delete PutEnrollDataMsg::default_instance_;
  delete PutEnrollDataMsg_reflection_;
  delete PutEnrollDataMsg_Request::default_instance_;
  delete PutEnrollDataMsg_Request_reflection_;
  delete PutEnrollDataMsg_Response::default_instance_;
  delete PutEnrollDataMsg_Response_reflection_;
  delete GetEnrollDataMsg::default_instance_;
  delete GetEnrollDataMsg_reflection_;
  delete GetEnrollDataMsg_Request::default_instance_;
  delete GetEnrollDataMsg_Request_reflection_;
  delete GetEnrollDataMsg_Response::default_instance_;
  delete GetEnrollDataMsg_Response_reflection_;
  delete GetGeneralLogDataMsg::default_instance_;
  delete GetGeneralLogDataMsg_reflection_;
  delete GetGeneralLogDataMsg_Request::default_instance_;
  delete GetGeneralLogDataMsg_Request_reflection_;
  delete GetGeneralLogDataMsg_Response::default_instance_;
  delete GetGeneralLogDataMsg_Response_reflection_;
}

void protobuf_AddDesc_msgbody_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmsgbody.proto\022\017com.spplus.buff\"k\n\nAtte"
    "ndBean\022\026\n\016nMachineNumber\030\001 \001(\003\022\016\n\006ipAddr"
    "\030\002 \001(\014\022\r\n\005nPort\030\003 \001(\003\022\024\n\014nNetPassword\030\004 "
    "\001(\003\022\020\n\010nLicense\030\005 \001(\003\"\234\001\n\010UserBean\022\026\n\016ap"
    "nEnrollNumer\030\001 \001(\003\022\027\n\017apnBackUpNumber\030\002 "
    "\001(\003\022\033\n\023apnMechinePrivilege\030\003 \001(\003\022\026\n\016apnE"
    "nableFlage\030\004 \001(\003\022\025\n\rapnEnrollData\030\005 \001(\003\022"
    "\023\n\013apnPassWord\030\006 \001(\003\"g\n\013LogDataBean\022\026\n\016a"
    "pnEnrollNumer\030\001 \001(\003\022\025\n\rapnVerifyMode\030\002 \001"
    "(\003\022\024\n\014apnInOutMode\030\003 \001(\003\022\023\n\013apnDateTime\030"
    "\004 \001(\014\"\212\002\n\020PutEnrollDataMsg\022:\n\007request\030\001 "
    "\001(\0132).com.spplus.buff.PutEnrollDataMsg.R"
    "equest\022<\n\010response\030\002 \001(\0132*.com.spplus.bu"
    "ff.PutEnrollDataMsg.Response\032_\n\007Request\022"
    "\'\n\004user\030\001 \001(\0132\031.com.spplus.buff.UserBean"
    "\022+\n\006attend\030\002 \001(\0132\033.com.spplus.buff.Atten"
    "dBean\032\033\n\010Response\022\017\n\007rescode\030\001 \001(\r\"\242\002\n\020G"
    "etEnrollDataMsg\022:\n\007request\030\001 \001(\0132).com.s"
    "pplus.buff.GetEnrollDataMsg.Request\022<\n\010r"
    "esponse\030\002 \001(\0132*.com.spplus.buff.GetEnrol"
    "lDataMsg.Response\032N\n\007Request\022\026\n\016apnEnrol"
    "lNumer\030\001 \001(\003\022+\n\006attend\030\002 \001(\0132\033.com.spplu"
    "s.buff.AttendBean\032D\n\010Response\022\'\n\004user\030\001 "
    "\001(\0132\031.com.spplus.buff.UserBean\022\017\n\007rescod"
    "e\030\002 \001(\r\"\233\002\n\024GetGeneralLogDataMsg\022>\n\007requ"
    "est\030\001 \001(\0132-.com.spplus.buff.GetGeneralLo"
    "gDataMsg.Request\022@\n\010response\030\002 \001(\0132..com"
    ".spplus.buff.GetGeneralLogDataMsg.Respon"
    "se\0326\n\007Request\022+\n\006attend\030\001 \001(\0132\033.com.sppl"
    "us.buff.AttendBean\032I\n\010Response\022,\n\006logrec"
    "\030\001 \003(\0132\034.com.spplus.buff.LogDataBean\022\017\n\007"
    "rescode\030\002 \001(\r", 1253);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msgbody.proto", &protobuf_RegisterTypes);
  AttendBean::default_instance_ = new AttendBean();
  UserBean::default_instance_ = new UserBean();
  LogDataBean::default_instance_ = new LogDataBean();
  PutEnrollDataMsg::default_instance_ = new PutEnrollDataMsg();
  PutEnrollDataMsg_Request::default_instance_ = new PutEnrollDataMsg_Request();
  PutEnrollDataMsg_Response::default_instance_ = new PutEnrollDataMsg_Response();
  GetEnrollDataMsg::default_instance_ = new GetEnrollDataMsg();
  GetEnrollDataMsg_Request::default_instance_ = new GetEnrollDataMsg_Request();
  GetEnrollDataMsg_Response::default_instance_ = new GetEnrollDataMsg_Response();
  GetGeneralLogDataMsg::default_instance_ = new GetGeneralLogDataMsg();
  GetGeneralLogDataMsg_Request::default_instance_ = new GetGeneralLogDataMsg_Request();
  GetGeneralLogDataMsg_Response::default_instance_ = new GetGeneralLogDataMsg_Response();
  AttendBean::default_instance_->InitAsDefaultInstance();
  UserBean::default_instance_->InitAsDefaultInstance();
  LogDataBean::default_instance_->InitAsDefaultInstance();
  PutEnrollDataMsg::default_instance_->InitAsDefaultInstance();
  PutEnrollDataMsg_Request::default_instance_->InitAsDefaultInstance();
  PutEnrollDataMsg_Response::default_instance_->InitAsDefaultInstance();
  GetEnrollDataMsg::default_instance_->InitAsDefaultInstance();
  GetEnrollDataMsg_Request::default_instance_->InitAsDefaultInstance();
  GetEnrollDataMsg_Response::default_instance_->InitAsDefaultInstance();
  GetGeneralLogDataMsg::default_instance_->InitAsDefaultInstance();
  GetGeneralLogDataMsg_Request::default_instance_->InitAsDefaultInstance();
  GetGeneralLogDataMsg_Response::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msgbody_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msgbody_2eproto {
  StaticDescriptorInitializer_msgbody_2eproto() {
    protobuf_AddDesc_msgbody_2eproto();
  }
} static_descriptor_initializer_msgbody_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AttendBean::kNMachineNumberFieldNumber;
const int AttendBean::kIpAddrFieldNumber;
const int AttendBean::kNPortFieldNumber;
const int AttendBean::kNNetPasswordFieldNumber;
const int AttendBean::kNLicenseFieldNumber;
#endif  // !_MSC_VER

AttendBean::AttendBean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AttendBean::InitAsDefaultInstance() {
}

AttendBean::AttendBean(const AttendBean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AttendBean::SharedCtor() {
  _cached_size_ = 0;
  nmachinenumber_ = GOOGLE_LONGLONG(0);
  ipaddr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nport_ = GOOGLE_LONGLONG(0);
  nnetpassword_ = GOOGLE_LONGLONG(0);
  nlicense_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttendBean::~AttendBean() {
  SharedDtor();
}

void AttendBean::SharedDtor() {
  if (ipaddr_ != &::google::protobuf::internal::kEmptyString) {
    delete ipaddr_;
  }
  if (this != default_instance_) {
  }
}

void AttendBean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttendBean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttendBean_descriptor_;
}

const AttendBean& AttendBean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

AttendBean* AttendBean::default_instance_ = NULL;

AttendBean* AttendBean::New() const {
  return new AttendBean;
}

void AttendBean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nmachinenumber_ = GOOGLE_LONGLONG(0);
    if (has_ipaddr()) {
      if (ipaddr_ != &::google::protobuf::internal::kEmptyString) {
        ipaddr_->clear();
      }
    }
    nport_ = GOOGLE_LONGLONG(0);
    nnetpassword_ = GOOGLE_LONGLONG(0);
    nlicense_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AttendBean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 nMachineNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nmachinenumber_)));
          set_has_nmachinenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ipAddr;
        break;
      }

      // optional bytes ipAddr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ipAddr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ipaddr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nPort;
        break;
      }

      // optional int64 nPort = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nport_)));
          set_has_nport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nNetPassword;
        break;
      }

      // optional int64 nNetPassword = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nNetPassword:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nnetpassword_)));
          set_has_nnetpassword();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nLicense;
        break;
      }

      // optional int64 nLicense = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nLicense:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nlicense_)));
          set_has_nlicense();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AttendBean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 nMachineNumber = 1;
  if (has_nmachinenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->nmachinenumber(), output);
  }

  // optional bytes ipAddr = 2;
  if (has_ipaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->ipaddr(), output);
  }

  // optional int64 nPort = 3;
  if (has_nport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->nport(), output);
  }

  // optional int64 nNetPassword = 4;
  if (has_nnetpassword()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->nnetpassword(), output);
  }

  // optional int64 nLicense = 5;
  if (has_nlicense()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->nlicense(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AttendBean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 nMachineNumber = 1;
  if (has_nmachinenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->nmachinenumber(), target);
  }

  // optional bytes ipAddr = 2;
  if (has_ipaddr()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->ipaddr(), target);
  }

  // optional int64 nPort = 3;
  if (has_nport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->nport(), target);
  }

  // optional int64 nNetPassword = 4;
  if (has_nnetpassword()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->nnetpassword(), target);
  }

  // optional int64 nLicense = 5;
  if (has_nlicense()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->nlicense(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AttendBean::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 nMachineNumber = 1;
    if (has_nmachinenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nmachinenumber());
    }

    // optional bytes ipAddr = 2;
    if (has_ipaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ipaddr());
    }

    // optional int64 nPort = 3;
    if (has_nport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nport());
    }

    // optional int64 nNetPassword = 4;
    if (has_nnetpassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nnetpassword());
    }

    // optional int64 nLicense = 5;
    if (has_nlicense()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nlicense());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttendBean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AttendBean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AttendBean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AttendBean::MergeFrom(const AttendBean& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nmachinenumber()) {
      set_nmachinenumber(from.nmachinenumber());
    }
    if (from.has_ipaddr()) {
      set_ipaddr(from.ipaddr());
    }
    if (from.has_nport()) {
      set_nport(from.nport());
    }
    if (from.has_nnetpassword()) {
      set_nnetpassword(from.nnetpassword());
    }
    if (from.has_nlicense()) {
      set_nlicense(from.nlicense());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AttendBean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttendBean::CopyFrom(const AttendBean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttendBean::IsInitialized() const {

  return true;
}

void AttendBean::Swap(AttendBean* other) {
  if (other != this) {
    std::swap(nmachinenumber_, other->nmachinenumber_);
    std::swap(ipaddr_, other->ipaddr_);
    std::swap(nport_, other->nport_);
    std::swap(nnetpassword_, other->nnetpassword_);
    std::swap(nlicense_, other->nlicense_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AttendBean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttendBean_descriptor_;
  metadata.reflection = AttendBean_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserBean::kApnEnrollNumerFieldNumber;
const int UserBean::kApnBackUpNumberFieldNumber;
const int UserBean::kApnMechinePrivilegeFieldNumber;
const int UserBean::kApnEnableFlageFieldNumber;
const int UserBean::kApnEnrollDataFieldNumber;
const int UserBean::kApnPassWordFieldNumber;
#endif  // !_MSC_VER

UserBean::UserBean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserBean::InitAsDefaultInstance() {
}

UserBean::UserBean(const UserBean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserBean::SharedCtor() {
  _cached_size_ = 0;
  apnenrollnumer_ = GOOGLE_LONGLONG(0);
  apnbackupnumber_ = GOOGLE_LONGLONG(0);
  apnmechineprivilege_ = GOOGLE_LONGLONG(0);
  apnenableflage_ = GOOGLE_LONGLONG(0);
  apnenrolldata_ = GOOGLE_LONGLONG(0);
  apnpassword_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserBean::~UserBean() {
  SharedDtor();
}

void UserBean::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserBean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserBean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserBean_descriptor_;
}

const UserBean& UserBean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

UserBean* UserBean::default_instance_ = NULL;

UserBean* UserBean::New() const {
  return new UserBean;
}

void UserBean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    apnenrollnumer_ = GOOGLE_LONGLONG(0);
    apnbackupnumber_ = GOOGLE_LONGLONG(0);
    apnmechineprivilege_ = GOOGLE_LONGLONG(0);
    apnenableflage_ = GOOGLE_LONGLONG(0);
    apnenrolldata_ = GOOGLE_LONGLONG(0);
    apnpassword_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserBean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 apnEnrollNumer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &apnenrollnumer_)));
          set_has_apnenrollnumer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_apnBackUpNumber;
        break;
      }

      // optional int64 apnBackUpNumber = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apnBackUpNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &apnbackupnumber_)));
          set_has_apnbackupnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_apnMechinePrivilege;
        break;
      }

      // optional int64 apnMechinePrivilege = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apnMechinePrivilege:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &apnmechineprivilege_)));
          set_has_apnmechineprivilege();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_apnEnableFlage;
        break;
      }

      // optional int64 apnEnableFlage = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apnEnableFlage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &apnenableflage_)));
          set_has_apnenableflage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_apnEnrollData;
        break;
      }

      // optional int64 apnEnrollData = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apnEnrollData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &apnenrolldata_)));
          set_has_apnenrolldata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_apnPassWord;
        break;
      }

      // optional int64 apnPassWord = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apnPassWord:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &apnpassword_)));
          set_has_apnpassword();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserBean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 apnEnrollNumer = 1;
  if (has_apnenrollnumer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->apnenrollnumer(), output);
  }

  // optional int64 apnBackUpNumber = 2;
  if (has_apnbackupnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->apnbackupnumber(), output);
  }

  // optional int64 apnMechinePrivilege = 3;
  if (has_apnmechineprivilege()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->apnmechineprivilege(), output);
  }

  // optional int64 apnEnableFlage = 4;
  if (has_apnenableflage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->apnenableflage(), output);
  }

  // optional int64 apnEnrollData = 5;
  if (has_apnenrolldata()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->apnenrolldata(), output);
  }

  // optional int64 apnPassWord = 6;
  if (has_apnpassword()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->apnpassword(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserBean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 apnEnrollNumer = 1;
  if (has_apnenrollnumer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->apnenrollnumer(), target);
  }

  // optional int64 apnBackUpNumber = 2;
  if (has_apnbackupnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->apnbackupnumber(), target);
  }

  // optional int64 apnMechinePrivilege = 3;
  if (has_apnmechineprivilege()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->apnmechineprivilege(), target);
  }

  // optional int64 apnEnableFlage = 4;
  if (has_apnenableflage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->apnenableflage(), target);
  }

  // optional int64 apnEnrollData = 5;
  if (has_apnenrolldata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->apnenrolldata(), target);
  }

  // optional int64 apnPassWord = 6;
  if (has_apnpassword()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->apnpassword(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserBean::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 apnEnrollNumer = 1;
    if (has_apnenrollnumer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->apnenrollnumer());
    }

    // optional int64 apnBackUpNumber = 2;
    if (has_apnbackupnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->apnbackupnumber());
    }

    // optional int64 apnMechinePrivilege = 3;
    if (has_apnmechineprivilege()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->apnmechineprivilege());
    }

    // optional int64 apnEnableFlage = 4;
    if (has_apnenableflage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->apnenableflage());
    }

    // optional int64 apnEnrollData = 5;
    if (has_apnenrolldata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->apnenrolldata());
    }

    // optional int64 apnPassWord = 6;
    if (has_apnpassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->apnpassword());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserBean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserBean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserBean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserBean::MergeFrom(const UserBean& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_apnenrollnumer()) {
      set_apnenrollnumer(from.apnenrollnumer());
    }
    if (from.has_apnbackupnumber()) {
      set_apnbackupnumber(from.apnbackupnumber());
    }
    if (from.has_apnmechineprivilege()) {
      set_apnmechineprivilege(from.apnmechineprivilege());
    }
    if (from.has_apnenableflage()) {
      set_apnenableflage(from.apnenableflage());
    }
    if (from.has_apnenrolldata()) {
      set_apnenrolldata(from.apnenrolldata());
    }
    if (from.has_apnpassword()) {
      set_apnpassword(from.apnpassword());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserBean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserBean::CopyFrom(const UserBean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserBean::IsInitialized() const {

  return true;
}

void UserBean::Swap(UserBean* other) {
  if (other != this) {
    std::swap(apnenrollnumer_, other->apnenrollnumer_);
    std::swap(apnbackupnumber_, other->apnbackupnumber_);
    std::swap(apnmechineprivilege_, other->apnmechineprivilege_);
    std::swap(apnenableflage_, other->apnenableflage_);
    std::swap(apnenrolldata_, other->apnenrolldata_);
    std::swap(apnpassword_, other->apnpassword_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserBean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserBean_descriptor_;
  metadata.reflection = UserBean_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogDataBean::kApnEnrollNumerFieldNumber;
const int LogDataBean::kApnVerifyModeFieldNumber;
const int LogDataBean::kApnInOutModeFieldNumber;
const int LogDataBean::kApnDateTimeFieldNumber;
#endif  // !_MSC_VER

LogDataBean::LogDataBean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogDataBean::InitAsDefaultInstance() {
}

LogDataBean::LogDataBean(const LogDataBean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogDataBean::SharedCtor() {
  _cached_size_ = 0;
  apnenrollnumer_ = GOOGLE_LONGLONG(0);
  apnverifymode_ = GOOGLE_LONGLONG(0);
  apninoutmode_ = GOOGLE_LONGLONG(0);
  apndatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogDataBean::~LogDataBean() {
  SharedDtor();
}

void LogDataBean::SharedDtor() {
  if (apndatetime_ != &::google::protobuf::internal::kEmptyString) {
    delete apndatetime_;
  }
  if (this != default_instance_) {
  }
}

void LogDataBean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogDataBean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogDataBean_descriptor_;
}

const LogDataBean& LogDataBean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

LogDataBean* LogDataBean::default_instance_ = NULL;

LogDataBean* LogDataBean::New() const {
  return new LogDataBean;
}

void LogDataBean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    apnenrollnumer_ = GOOGLE_LONGLONG(0);
    apnverifymode_ = GOOGLE_LONGLONG(0);
    apninoutmode_ = GOOGLE_LONGLONG(0);
    if (has_apndatetime()) {
      if (apndatetime_ != &::google::protobuf::internal::kEmptyString) {
        apndatetime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogDataBean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 apnEnrollNumer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &apnenrollnumer_)));
          set_has_apnenrollnumer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_apnVerifyMode;
        break;
      }

      // optional int64 apnVerifyMode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apnVerifyMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &apnverifymode_)));
          set_has_apnverifymode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_apnInOutMode;
        break;
      }

      // optional int64 apnInOutMode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apnInOutMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &apninoutmode_)));
          set_has_apninoutmode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_apnDateTime;
        break;
      }

      // optional bytes apnDateTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apnDateTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_apndatetime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogDataBean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 apnEnrollNumer = 1;
  if (has_apnenrollnumer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->apnenrollnumer(), output);
  }

  // optional int64 apnVerifyMode = 2;
  if (has_apnverifymode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->apnverifymode(), output);
  }

  // optional int64 apnInOutMode = 3;
  if (has_apninoutmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->apninoutmode(), output);
  }

  // optional bytes apnDateTime = 4;
  if (has_apndatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->apndatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogDataBean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 apnEnrollNumer = 1;
  if (has_apnenrollnumer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->apnenrollnumer(), target);
  }

  // optional int64 apnVerifyMode = 2;
  if (has_apnverifymode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->apnverifymode(), target);
  }

  // optional int64 apnInOutMode = 3;
  if (has_apninoutmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->apninoutmode(), target);
  }

  // optional bytes apnDateTime = 4;
  if (has_apndatetime()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->apndatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogDataBean::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 apnEnrollNumer = 1;
    if (has_apnenrollnumer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->apnenrollnumer());
    }

    // optional int64 apnVerifyMode = 2;
    if (has_apnverifymode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->apnverifymode());
    }

    // optional int64 apnInOutMode = 3;
    if (has_apninoutmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->apninoutmode());
    }

    // optional bytes apnDateTime = 4;
    if (has_apndatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->apndatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogDataBean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogDataBean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogDataBean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogDataBean::MergeFrom(const LogDataBean& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_apnenrollnumer()) {
      set_apnenrollnumer(from.apnenrollnumer());
    }
    if (from.has_apnverifymode()) {
      set_apnverifymode(from.apnverifymode());
    }
    if (from.has_apninoutmode()) {
      set_apninoutmode(from.apninoutmode());
    }
    if (from.has_apndatetime()) {
      set_apndatetime(from.apndatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogDataBean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogDataBean::CopyFrom(const LogDataBean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogDataBean::IsInitialized() const {

  return true;
}

void LogDataBean::Swap(LogDataBean* other) {
  if (other != this) {
    std::swap(apnenrollnumer_, other->apnenrollnumer_);
    std::swap(apnverifymode_, other->apnverifymode_);
    std::swap(apninoutmode_, other->apninoutmode_);
    std::swap(apndatetime_, other->apndatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogDataBean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogDataBean_descriptor_;
  metadata.reflection = LogDataBean_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PutEnrollDataMsg_Request::kUserFieldNumber;
const int PutEnrollDataMsg_Request::kAttendFieldNumber;
#endif  // !_MSC_VER

PutEnrollDataMsg_Request::PutEnrollDataMsg_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PutEnrollDataMsg_Request::InitAsDefaultInstance() {
  user_ = const_cast< ::com::spplus::buff::UserBean*>(&::com::spplus::buff::UserBean::default_instance());
  attend_ = const_cast< ::com::spplus::buff::AttendBean*>(&::com::spplus::buff::AttendBean::default_instance());
}

PutEnrollDataMsg_Request::PutEnrollDataMsg_Request(const PutEnrollDataMsg_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PutEnrollDataMsg_Request::SharedCtor() {
  _cached_size_ = 0;
  user_ = NULL;
  attend_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PutEnrollDataMsg_Request::~PutEnrollDataMsg_Request() {
  SharedDtor();
}

void PutEnrollDataMsg_Request::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
    delete attend_;
  }
}

void PutEnrollDataMsg_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutEnrollDataMsg_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutEnrollDataMsg_Request_descriptor_;
}

const PutEnrollDataMsg_Request& PutEnrollDataMsg_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

PutEnrollDataMsg_Request* PutEnrollDataMsg_Request::default_instance_ = NULL;

PutEnrollDataMsg_Request* PutEnrollDataMsg_Request::New() const {
  return new PutEnrollDataMsg_Request;
}

void PutEnrollDataMsg_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user()) {
      if (user_ != NULL) user_->::com::spplus::buff::UserBean::Clear();
    }
    if (has_attend()) {
      if (attend_ != NULL) attend_->::com::spplus::buff::AttendBean::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PutEnrollDataMsg_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.spplus.buff.UserBean user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attend;
        break;
      }

      // optional .com.spplus.buff.AttendBean attend = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PutEnrollDataMsg_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.spplus.buff.UserBean user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user(), output);
  }

  // optional .com.spplus.buff.AttendBean attend = 2;
  if (has_attend()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attend(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PutEnrollDataMsg_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.spplus.buff.UserBean user = 1;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user(), target);
  }

  // optional .com.spplus.buff.AttendBean attend = 2;
  if (has_attend()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attend(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PutEnrollDataMsg_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.spplus.buff.UserBean user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // optional .com.spplus.buff.AttendBean attend = 2;
    if (has_attend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attend());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutEnrollDataMsg_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PutEnrollDataMsg_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PutEnrollDataMsg_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PutEnrollDataMsg_Request::MergeFrom(const PutEnrollDataMsg_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      mutable_user()->::com::spplus::buff::UserBean::MergeFrom(from.user());
    }
    if (from.has_attend()) {
      mutable_attend()->::com::spplus::buff::AttendBean::MergeFrom(from.attend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PutEnrollDataMsg_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutEnrollDataMsg_Request::CopyFrom(const PutEnrollDataMsg_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutEnrollDataMsg_Request::IsInitialized() const {

  return true;
}

void PutEnrollDataMsg_Request::Swap(PutEnrollDataMsg_Request* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(attend_, other->attend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PutEnrollDataMsg_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutEnrollDataMsg_Request_descriptor_;
  metadata.reflection = PutEnrollDataMsg_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PutEnrollDataMsg_Response::kRescodeFieldNumber;
#endif  // !_MSC_VER

PutEnrollDataMsg_Response::PutEnrollDataMsg_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PutEnrollDataMsg_Response::InitAsDefaultInstance() {
}

PutEnrollDataMsg_Response::PutEnrollDataMsg_Response(const PutEnrollDataMsg_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PutEnrollDataMsg_Response::SharedCtor() {
  _cached_size_ = 0;
  rescode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PutEnrollDataMsg_Response::~PutEnrollDataMsg_Response() {
  SharedDtor();
}

void PutEnrollDataMsg_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PutEnrollDataMsg_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutEnrollDataMsg_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutEnrollDataMsg_Response_descriptor_;
}

const PutEnrollDataMsg_Response& PutEnrollDataMsg_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

PutEnrollDataMsg_Response* PutEnrollDataMsg_Response::default_instance_ = NULL;

PutEnrollDataMsg_Response* PutEnrollDataMsg_Response::New() const {
  return new PutEnrollDataMsg_Response;
}

void PutEnrollDataMsg_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rescode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PutEnrollDataMsg_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rescode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rescode_)));
          set_has_rescode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PutEnrollDataMsg_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rescode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PutEnrollDataMsg_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rescode = 1;
  if (has_rescode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rescode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PutEnrollDataMsg_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rescode = 1;
    if (has_rescode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rescode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutEnrollDataMsg_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PutEnrollDataMsg_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PutEnrollDataMsg_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PutEnrollDataMsg_Response::MergeFrom(const PutEnrollDataMsg_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rescode()) {
      set_rescode(from.rescode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PutEnrollDataMsg_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutEnrollDataMsg_Response::CopyFrom(const PutEnrollDataMsg_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutEnrollDataMsg_Response::IsInitialized() const {

  return true;
}

void PutEnrollDataMsg_Response::Swap(PutEnrollDataMsg_Response* other) {
  if (other != this) {
    std::swap(rescode_, other->rescode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PutEnrollDataMsg_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutEnrollDataMsg_Response_descriptor_;
  metadata.reflection = PutEnrollDataMsg_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PutEnrollDataMsg::kRequestFieldNumber;
const int PutEnrollDataMsg::kResponseFieldNumber;
#endif  // !_MSC_VER

PutEnrollDataMsg::PutEnrollDataMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PutEnrollDataMsg::InitAsDefaultInstance() {
  request_ = const_cast< ::com::spplus::buff::PutEnrollDataMsg_Request*>(&::com::spplus::buff::PutEnrollDataMsg_Request::default_instance());
  response_ = const_cast< ::com::spplus::buff::PutEnrollDataMsg_Response*>(&::com::spplus::buff::PutEnrollDataMsg_Response::default_instance());
}

PutEnrollDataMsg::PutEnrollDataMsg(const PutEnrollDataMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PutEnrollDataMsg::SharedCtor() {
  _cached_size_ = 0;
  request_ = NULL;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PutEnrollDataMsg::~PutEnrollDataMsg() {
  SharedDtor();
}

void PutEnrollDataMsg::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
    delete response_;
  }
}

void PutEnrollDataMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutEnrollDataMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutEnrollDataMsg_descriptor_;
}

const PutEnrollDataMsg& PutEnrollDataMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

PutEnrollDataMsg* PutEnrollDataMsg::default_instance_ = NULL;

PutEnrollDataMsg* PutEnrollDataMsg::New() const {
  return new PutEnrollDataMsg;
}

void PutEnrollDataMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request()) {
      if (request_ != NULL) request_->::com::spplus::buff::PutEnrollDataMsg_Request::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::com::spplus::buff::PutEnrollDataMsg_Response::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PutEnrollDataMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.spplus.buff.PutEnrollDataMsg.Request request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional .com.spplus.buff.PutEnrollDataMsg.Response response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PutEnrollDataMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.spplus.buff.PutEnrollDataMsg.Request request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->request(), output);
  }

  // optional .com.spplus.buff.PutEnrollDataMsg.Response response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PutEnrollDataMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.spplus.buff.PutEnrollDataMsg.Request request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->request(), target);
  }

  // optional .com.spplus.buff.PutEnrollDataMsg.Response response = 2;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PutEnrollDataMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.spplus.buff.PutEnrollDataMsg.Request request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

    // optional .com.spplus.buff.PutEnrollDataMsg.Response response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutEnrollDataMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PutEnrollDataMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PutEnrollDataMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PutEnrollDataMsg::MergeFrom(const PutEnrollDataMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      mutable_request()->::com::spplus::buff::PutEnrollDataMsg_Request::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::com::spplus::buff::PutEnrollDataMsg_Response::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PutEnrollDataMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutEnrollDataMsg::CopyFrom(const PutEnrollDataMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutEnrollDataMsg::IsInitialized() const {

  return true;
}

void PutEnrollDataMsg::Swap(PutEnrollDataMsg* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PutEnrollDataMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutEnrollDataMsg_descriptor_;
  metadata.reflection = PutEnrollDataMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetEnrollDataMsg_Request::kApnEnrollNumerFieldNumber;
const int GetEnrollDataMsg_Request::kAttendFieldNumber;
#endif  // !_MSC_VER

GetEnrollDataMsg_Request::GetEnrollDataMsg_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetEnrollDataMsg_Request::InitAsDefaultInstance() {
  attend_ = const_cast< ::com::spplus::buff::AttendBean*>(&::com::spplus::buff::AttendBean::default_instance());
}

GetEnrollDataMsg_Request::GetEnrollDataMsg_Request(const GetEnrollDataMsg_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetEnrollDataMsg_Request::SharedCtor() {
  _cached_size_ = 0;
  apnenrollnumer_ = GOOGLE_LONGLONG(0);
  attend_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetEnrollDataMsg_Request::~GetEnrollDataMsg_Request() {
  SharedDtor();
}

void GetEnrollDataMsg_Request::SharedDtor() {
  if (this != default_instance_) {
    delete attend_;
  }
}

void GetEnrollDataMsg_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetEnrollDataMsg_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetEnrollDataMsg_Request_descriptor_;
}

const GetEnrollDataMsg_Request& GetEnrollDataMsg_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

GetEnrollDataMsg_Request* GetEnrollDataMsg_Request::default_instance_ = NULL;

GetEnrollDataMsg_Request* GetEnrollDataMsg_Request::New() const {
  return new GetEnrollDataMsg_Request;
}

void GetEnrollDataMsg_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    apnenrollnumer_ = GOOGLE_LONGLONG(0);
    if (has_attend()) {
      if (attend_ != NULL) attend_->::com::spplus::buff::AttendBean::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetEnrollDataMsg_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 apnEnrollNumer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &apnenrollnumer_)));
          set_has_apnenrollnumer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attend;
        break;
      }

      // optional .com.spplus.buff.AttendBean attend = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetEnrollDataMsg_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 apnEnrollNumer = 1;
  if (has_apnenrollnumer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->apnenrollnumer(), output);
  }

  // optional .com.spplus.buff.AttendBean attend = 2;
  if (has_attend()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attend(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetEnrollDataMsg_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 apnEnrollNumer = 1;
  if (has_apnenrollnumer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->apnenrollnumer(), target);
  }

  // optional .com.spplus.buff.AttendBean attend = 2;
  if (has_attend()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attend(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetEnrollDataMsg_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 apnEnrollNumer = 1;
    if (has_apnenrollnumer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->apnenrollnumer());
    }

    // optional .com.spplus.buff.AttendBean attend = 2;
    if (has_attend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attend());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetEnrollDataMsg_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetEnrollDataMsg_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetEnrollDataMsg_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetEnrollDataMsg_Request::MergeFrom(const GetEnrollDataMsg_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_apnenrollnumer()) {
      set_apnenrollnumer(from.apnenrollnumer());
    }
    if (from.has_attend()) {
      mutable_attend()->::com::spplus::buff::AttendBean::MergeFrom(from.attend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetEnrollDataMsg_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEnrollDataMsg_Request::CopyFrom(const GetEnrollDataMsg_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEnrollDataMsg_Request::IsInitialized() const {

  return true;
}

void GetEnrollDataMsg_Request::Swap(GetEnrollDataMsg_Request* other) {
  if (other != this) {
    std::swap(apnenrollnumer_, other->apnenrollnumer_);
    std::swap(attend_, other->attend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetEnrollDataMsg_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetEnrollDataMsg_Request_descriptor_;
  metadata.reflection = GetEnrollDataMsg_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GetEnrollDataMsg_Response::kUserFieldNumber;
const int GetEnrollDataMsg_Response::kRescodeFieldNumber;
#endif  // !_MSC_VER

GetEnrollDataMsg_Response::GetEnrollDataMsg_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetEnrollDataMsg_Response::InitAsDefaultInstance() {
  user_ = const_cast< ::com::spplus::buff::UserBean*>(&::com::spplus::buff::UserBean::default_instance());
}

GetEnrollDataMsg_Response::GetEnrollDataMsg_Response(const GetEnrollDataMsg_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetEnrollDataMsg_Response::SharedCtor() {
  _cached_size_ = 0;
  user_ = NULL;
  rescode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetEnrollDataMsg_Response::~GetEnrollDataMsg_Response() {
  SharedDtor();
}

void GetEnrollDataMsg_Response::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
  }
}

void GetEnrollDataMsg_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetEnrollDataMsg_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetEnrollDataMsg_Response_descriptor_;
}

const GetEnrollDataMsg_Response& GetEnrollDataMsg_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

GetEnrollDataMsg_Response* GetEnrollDataMsg_Response::default_instance_ = NULL;

GetEnrollDataMsg_Response* GetEnrollDataMsg_Response::New() const {
  return new GetEnrollDataMsg_Response;
}

void GetEnrollDataMsg_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user()) {
      if (user_ != NULL) user_->::com::spplus::buff::UserBean::Clear();
    }
    rescode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetEnrollDataMsg_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.spplus.buff.UserBean user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rescode;
        break;
      }

      // optional uint32 rescode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rescode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rescode_)));
          set_has_rescode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetEnrollDataMsg_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.spplus.buff.UserBean user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user(), output);
  }

  // optional uint32 rescode = 2;
  if (has_rescode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rescode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetEnrollDataMsg_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.spplus.buff.UserBean user = 1;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user(), target);
  }

  // optional uint32 rescode = 2;
  if (has_rescode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rescode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetEnrollDataMsg_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.spplus.buff.UserBean user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // optional uint32 rescode = 2;
    if (has_rescode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rescode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetEnrollDataMsg_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetEnrollDataMsg_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetEnrollDataMsg_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetEnrollDataMsg_Response::MergeFrom(const GetEnrollDataMsg_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      mutable_user()->::com::spplus::buff::UserBean::MergeFrom(from.user());
    }
    if (from.has_rescode()) {
      set_rescode(from.rescode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetEnrollDataMsg_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEnrollDataMsg_Response::CopyFrom(const GetEnrollDataMsg_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEnrollDataMsg_Response::IsInitialized() const {

  return true;
}

void GetEnrollDataMsg_Response::Swap(GetEnrollDataMsg_Response* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(rescode_, other->rescode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetEnrollDataMsg_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetEnrollDataMsg_Response_descriptor_;
  metadata.reflection = GetEnrollDataMsg_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GetEnrollDataMsg::kRequestFieldNumber;
const int GetEnrollDataMsg::kResponseFieldNumber;
#endif  // !_MSC_VER

GetEnrollDataMsg::GetEnrollDataMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetEnrollDataMsg::InitAsDefaultInstance() {
  request_ = const_cast< ::com::spplus::buff::GetEnrollDataMsg_Request*>(&::com::spplus::buff::GetEnrollDataMsg_Request::default_instance());
  response_ = const_cast< ::com::spplus::buff::GetEnrollDataMsg_Response*>(&::com::spplus::buff::GetEnrollDataMsg_Response::default_instance());
}

GetEnrollDataMsg::GetEnrollDataMsg(const GetEnrollDataMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetEnrollDataMsg::SharedCtor() {
  _cached_size_ = 0;
  request_ = NULL;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetEnrollDataMsg::~GetEnrollDataMsg() {
  SharedDtor();
}

void GetEnrollDataMsg::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
    delete response_;
  }
}

void GetEnrollDataMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetEnrollDataMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetEnrollDataMsg_descriptor_;
}

const GetEnrollDataMsg& GetEnrollDataMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

GetEnrollDataMsg* GetEnrollDataMsg::default_instance_ = NULL;

GetEnrollDataMsg* GetEnrollDataMsg::New() const {
  return new GetEnrollDataMsg;
}

void GetEnrollDataMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request()) {
      if (request_ != NULL) request_->::com::spplus::buff::GetEnrollDataMsg_Request::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::com::spplus::buff::GetEnrollDataMsg_Response::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetEnrollDataMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.spplus.buff.GetEnrollDataMsg.Request request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional .com.spplus.buff.GetEnrollDataMsg.Response response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetEnrollDataMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.spplus.buff.GetEnrollDataMsg.Request request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->request(), output);
  }

  // optional .com.spplus.buff.GetEnrollDataMsg.Response response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetEnrollDataMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.spplus.buff.GetEnrollDataMsg.Request request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->request(), target);
  }

  // optional .com.spplus.buff.GetEnrollDataMsg.Response response = 2;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetEnrollDataMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.spplus.buff.GetEnrollDataMsg.Request request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

    // optional .com.spplus.buff.GetEnrollDataMsg.Response response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetEnrollDataMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetEnrollDataMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetEnrollDataMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetEnrollDataMsg::MergeFrom(const GetEnrollDataMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      mutable_request()->::com::spplus::buff::GetEnrollDataMsg_Request::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::com::spplus::buff::GetEnrollDataMsg_Response::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetEnrollDataMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEnrollDataMsg::CopyFrom(const GetEnrollDataMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEnrollDataMsg::IsInitialized() const {

  return true;
}

void GetEnrollDataMsg::Swap(GetEnrollDataMsg* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetEnrollDataMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetEnrollDataMsg_descriptor_;
  metadata.reflection = GetEnrollDataMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGeneralLogDataMsg_Request::kAttendFieldNumber;
#endif  // !_MSC_VER

GetGeneralLogDataMsg_Request::GetGeneralLogDataMsg_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGeneralLogDataMsg_Request::InitAsDefaultInstance() {
  attend_ = const_cast< ::com::spplus::buff::AttendBean*>(&::com::spplus::buff::AttendBean::default_instance());
}

GetGeneralLogDataMsg_Request::GetGeneralLogDataMsg_Request(const GetGeneralLogDataMsg_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGeneralLogDataMsg_Request::SharedCtor() {
  _cached_size_ = 0;
  attend_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGeneralLogDataMsg_Request::~GetGeneralLogDataMsg_Request() {
  SharedDtor();
}

void GetGeneralLogDataMsg_Request::SharedDtor() {
  if (this != default_instance_) {
    delete attend_;
  }
}

void GetGeneralLogDataMsg_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGeneralLogDataMsg_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGeneralLogDataMsg_Request_descriptor_;
}

const GetGeneralLogDataMsg_Request& GetGeneralLogDataMsg_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

GetGeneralLogDataMsg_Request* GetGeneralLogDataMsg_Request::default_instance_ = NULL;

GetGeneralLogDataMsg_Request* GetGeneralLogDataMsg_Request::New() const {
  return new GetGeneralLogDataMsg_Request;
}

void GetGeneralLogDataMsg_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_attend()) {
      if (attend_ != NULL) attend_->::com::spplus::buff::AttendBean::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGeneralLogDataMsg_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.spplus.buff.AttendBean attend = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetGeneralLogDataMsg_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.spplus.buff.AttendBean attend = 1;
  if (has_attend()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attend(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGeneralLogDataMsg_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.spplus.buff.AttendBean attend = 1;
  if (has_attend()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attend(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGeneralLogDataMsg_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.spplus.buff.AttendBean attend = 1;
    if (has_attend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attend());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGeneralLogDataMsg_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGeneralLogDataMsg_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGeneralLogDataMsg_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGeneralLogDataMsg_Request::MergeFrom(const GetGeneralLogDataMsg_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attend()) {
      mutable_attend()->::com::spplus::buff::AttendBean::MergeFrom(from.attend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGeneralLogDataMsg_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGeneralLogDataMsg_Request::CopyFrom(const GetGeneralLogDataMsg_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGeneralLogDataMsg_Request::IsInitialized() const {

  return true;
}

void GetGeneralLogDataMsg_Request::Swap(GetGeneralLogDataMsg_Request* other) {
  if (other != this) {
    std::swap(attend_, other->attend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGeneralLogDataMsg_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGeneralLogDataMsg_Request_descriptor_;
  metadata.reflection = GetGeneralLogDataMsg_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GetGeneralLogDataMsg_Response::kLogrecFieldNumber;
const int GetGeneralLogDataMsg_Response::kRescodeFieldNumber;
#endif  // !_MSC_VER

GetGeneralLogDataMsg_Response::GetGeneralLogDataMsg_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGeneralLogDataMsg_Response::InitAsDefaultInstance() {
}

GetGeneralLogDataMsg_Response::GetGeneralLogDataMsg_Response(const GetGeneralLogDataMsg_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGeneralLogDataMsg_Response::SharedCtor() {
  _cached_size_ = 0;
  rescode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGeneralLogDataMsg_Response::~GetGeneralLogDataMsg_Response() {
  SharedDtor();
}

void GetGeneralLogDataMsg_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGeneralLogDataMsg_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGeneralLogDataMsg_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGeneralLogDataMsg_Response_descriptor_;
}

const GetGeneralLogDataMsg_Response& GetGeneralLogDataMsg_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

GetGeneralLogDataMsg_Response* GetGeneralLogDataMsg_Response::default_instance_ = NULL;

GetGeneralLogDataMsg_Response* GetGeneralLogDataMsg_Response::New() const {
  return new GetGeneralLogDataMsg_Response;
}

void GetGeneralLogDataMsg_Response::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    rescode_ = 0u;
  }
  logrec_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGeneralLogDataMsg_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.spplus.buff.LogDataBean logrec = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logrec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_logrec()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_logrec;
        if (input->ExpectTag(16)) goto parse_rescode;
        break;
      }

      // optional uint32 rescode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rescode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rescode_)));
          set_has_rescode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetGeneralLogDataMsg_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.spplus.buff.LogDataBean logrec = 1;
  for (int i = 0; i < this->logrec_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->logrec(i), output);
  }

  // optional uint32 rescode = 2;
  if (has_rescode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rescode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGeneralLogDataMsg_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.spplus.buff.LogDataBean logrec = 1;
  for (int i = 0; i < this->logrec_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->logrec(i), target);
  }

  // optional uint32 rescode = 2;
  if (has_rescode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rescode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGeneralLogDataMsg_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 rescode = 2;
    if (has_rescode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rescode());
    }

  }
  // repeated .com.spplus.buff.LogDataBean logrec = 1;
  total_size += 1 * this->logrec_size();
  for (int i = 0; i < this->logrec_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->logrec(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGeneralLogDataMsg_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGeneralLogDataMsg_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGeneralLogDataMsg_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGeneralLogDataMsg_Response::MergeFrom(const GetGeneralLogDataMsg_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  logrec_.MergeFrom(from.logrec_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_rescode()) {
      set_rescode(from.rescode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGeneralLogDataMsg_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGeneralLogDataMsg_Response::CopyFrom(const GetGeneralLogDataMsg_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGeneralLogDataMsg_Response::IsInitialized() const {

  return true;
}

void GetGeneralLogDataMsg_Response::Swap(GetGeneralLogDataMsg_Response* other) {
  if (other != this) {
    logrec_.Swap(&other->logrec_);
    std::swap(rescode_, other->rescode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGeneralLogDataMsg_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGeneralLogDataMsg_Response_descriptor_;
  metadata.reflection = GetGeneralLogDataMsg_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GetGeneralLogDataMsg::kRequestFieldNumber;
const int GetGeneralLogDataMsg::kResponseFieldNumber;
#endif  // !_MSC_VER

GetGeneralLogDataMsg::GetGeneralLogDataMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGeneralLogDataMsg::InitAsDefaultInstance() {
  request_ = const_cast< ::com::spplus::buff::GetGeneralLogDataMsg_Request*>(&::com::spplus::buff::GetGeneralLogDataMsg_Request::default_instance());
  response_ = const_cast< ::com::spplus::buff::GetGeneralLogDataMsg_Response*>(&::com::spplus::buff::GetGeneralLogDataMsg_Response::default_instance());
}

GetGeneralLogDataMsg::GetGeneralLogDataMsg(const GetGeneralLogDataMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGeneralLogDataMsg::SharedCtor() {
  _cached_size_ = 0;
  request_ = NULL;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGeneralLogDataMsg::~GetGeneralLogDataMsg() {
  SharedDtor();
}

void GetGeneralLogDataMsg::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
    delete response_;
  }
}

void GetGeneralLogDataMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGeneralLogDataMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGeneralLogDataMsg_descriptor_;
}

const GetGeneralLogDataMsg& GetGeneralLogDataMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgbody_2eproto();
  return *default_instance_;
}

GetGeneralLogDataMsg* GetGeneralLogDataMsg::default_instance_ = NULL;

GetGeneralLogDataMsg* GetGeneralLogDataMsg::New() const {
  return new GetGeneralLogDataMsg;
}

void GetGeneralLogDataMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request()) {
      if (request_ != NULL) request_->::com::spplus::buff::GetGeneralLogDataMsg_Request::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::com::spplus::buff::GetGeneralLogDataMsg_Response::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGeneralLogDataMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.spplus.buff.GetGeneralLogDataMsg.Request request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional .com.spplus.buff.GetGeneralLogDataMsg.Response response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetGeneralLogDataMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.spplus.buff.GetGeneralLogDataMsg.Request request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->request(), output);
  }

  // optional .com.spplus.buff.GetGeneralLogDataMsg.Response response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGeneralLogDataMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.spplus.buff.GetGeneralLogDataMsg.Request request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->request(), target);
  }

  // optional .com.spplus.buff.GetGeneralLogDataMsg.Response response = 2;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGeneralLogDataMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.spplus.buff.GetGeneralLogDataMsg.Request request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

    // optional .com.spplus.buff.GetGeneralLogDataMsg.Response response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGeneralLogDataMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGeneralLogDataMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGeneralLogDataMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGeneralLogDataMsg::MergeFrom(const GetGeneralLogDataMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      mutable_request()->::com::spplus::buff::GetGeneralLogDataMsg_Request::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::com::spplus::buff::GetGeneralLogDataMsg_Response::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGeneralLogDataMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGeneralLogDataMsg::CopyFrom(const GetGeneralLogDataMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGeneralLogDataMsg::IsInitialized() const {

  return true;
}

void GetGeneralLogDataMsg::Swap(GetGeneralLogDataMsg* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGeneralLogDataMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGeneralLogDataMsg_descriptor_;
  metadata.reflection = GetGeneralLogDataMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace buff
}  // namespace spplus
}  // namespace com

// @@protoc_insertion_point(global_scope)
